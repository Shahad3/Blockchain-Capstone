// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var veri = artifacts.require('SolnSquareVerifier');
var ve = artifacts.require('Verifier');
// import ver from '../build/contracts/Verifier.json';
// var veAddress = "0x4e3e408000e7b39950ebb0091abac542bee66179";


// module.exports = function(deployer) {
//     deployer.deploy(ve)
//     .then(() => 
//       // Option 2) Console log the address:
//       .then(() => console.log(ve.address));
  
//       // Option 3) Retrieve the contract instance and get the address from that:
//     //   .then(() => SimpleStorage.deployed())
//     //   .then(_instance => console.log(_instance.address));
//  )
//   };




var proofs = require('../proofs.js');
// Test verification with correct proof
contract('SolnSquareVerifier', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    
// Test if a new solution can be added for contract - SolnSquareVerifier
let proof = proofs[0];


it('Test if a new solution can be added for contract', async function () { 
try{
    let veriAdd = await ve.new();
    this.contract = await veri.new("Name", "Symbol", veriAdd.address);
    // TODO: mint multiple tokens
    // console.log("proof! ", proof.proof.a, proof.proof.b, proof.proof.c, proof.proof.inputs);
    let result = await this.contract.addSolution(1,account_one);
    console.log(result);
    assert.equal(result.receipt.status, true, "new solution can be added");
}
catch(e){
    console.log(e," : ", e.message);
}
})

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
it('Test if an ERC721 token can be minted for contract', async function () { 
    try{
        let veriAdd = await ve.new();
        this.contract = await veri.new("Name", "Symbol", veriAdd.address);
        // TODO: mint multiple tokens
        // console.log("proof! ", proof.proof.a, proof.proof.b, proof.proof.c, proof.proof.inputs);
        let result = await this.contract.mint(account_one, 1,proof.proof.a, proof.proof.b, proof.proof.c, proof.inputs);
        assert.equal(result.receipt.status, true, "new solution can be added");
    }
    catch(e){
        console.log(e," : ", e.message);
    }
    })

})

